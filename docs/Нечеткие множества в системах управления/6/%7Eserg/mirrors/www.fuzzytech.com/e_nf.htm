<!doctype html public "-//ietf//dtd html//en">
<html>

<head>
<meta http-equiv="content-type"
content="text/html; charset=iso-8859-1">
<meta name="generator" content="microsoft frontpage 2.0">
<title>fuzzyTECH: 6. NeuroFuzzy & FuzzyCluster Modules</title>
</head>

<body bgcolor="#c0c0c0">

<table border="1" cellspacing="1" width="100%" bgcolor="#ffff00">
    <tr>
        <td bgcolor="#000080"><font color="#00ffff" size="5"
        face="arial"><b><i>fuzzy</i></b><b>TECH: 6.
        NeuroFuzzy&trade; &amp; FuzzyCluster&trade; Modules</b></font>
        </td>
        <td align="center" bgcolor="#ffff00"><a href="index.htm"><img
        src="home.gif" alt="go back to home page" width="21"
        height="21"></a><a href="e_order.htm"><img
        src="previous.gif" alt="go to previous page in sequence"
        width="21" height="21"></a><a href="e_apnote.htm"><img
        src="next.gif" alt="go to next page in sequence"
        width="21" height="21"></a> </td>
    </tr>
</table>

<p><font size="2" face="arial">In many applications, desired
system behavior is partially represented by data sets. In control
systems, these data sets may represent operational states. In
decision support systems and data analysis applications, these
data sets may represent sample cases. The NeuroFuzzy Module
allows for these data sets to be used for automated fuzzy logic
system generation with any <i>fuzzy</i>TECH Edition. Both
generation of membership functions and fuzzy logic rules is
supported, as well as automatic optimization towards the data
sets. The </font><a href="#fc"><font size="2" face="arial">FuzzyCluster
Module</font></a><font size="2" face="arial"> provides
preprocessing of the sample data, removing implausible and
redundant data sets. This can greatly reduce training time
required by the NeuroFuzzy Module.</font><font size="2"> </font></p>

<p><img src="nn_fl_nf.gif" width="180" height="192"> <br>
<font size="2" face="arial"><i>The Error-Backpropagation Training
Algorithm <br>
of Neural Nets Trains a Fuzzy Logic System</i></font></p>

<p><font size="2" face="arial">The NeuroFuzzy Module uses a
modified error-backpropagation algorithm to train rules and
membership functions of a fuzzy logic system. In contrast to
neural network solutions, the entire training process and the
resulting fuzzy logic system remains completely self-explanatory.
</font></p>

<p><img src="nf_train.gif" width="370" height="433"><font
size="2"> <br>
</font><font size="2" face="arial"><i>During Training, the Learn
Control Dialog Supervises and Guides Training</i></font></p>

<p><font size="2" face="arial">The modified error backpropagation
algorithm is based on a fuzzy logic inference extension that is
implemented in all <i>fuzzy</i>TECH Editions: Fuzzy Associative
Maps (FAM). FAMs are generalized fuzzy logic rules that are
associated with a weight. </font></p>

<p><img src="nf_matx.gif" width="228" height="185"><font size="2">
<br>
</font><font size="2" face="arial"><i>Fuzzy Associative Maps
(FAM) Are <br>
Generalized Fuzzy Logic Rules</i></font><font size="2"> </font></p>

<p><font size="2" face="arial">Such FAM rules can be considered
generalized neurons, and using the NeuroFuzzy Module
technologies, neural net training methods are applicable. A
&quot;Fuzzy Design Wizard&quot; optionally sets up appropriate
membership functions and rule blocks prior to the actual training
phase based on the data sets.</font></p>

<p><img src="nf_open.gif" width="220" height="175"><font size="2">
<br>
</font><font size="2" face="arial"><i>Components of the Fuzzy
System to Be <br>
Optimized Are Explicitly Opened for Training</i></font></p>

<p><font size="2" face="arial">The NeuroFuzzy Module can also be
used to optimize existing fuzzy logic systems. Starting with an
existing fuzzy logic system, the NeuroFuzzy Module interactively
tunes rule weights and membership function definitions so that
the system converges to the behavior represented by the data
sets. For this optimization process, rules and membership
functions may be locked or opened for learning. Any fuzzy logic
system generated by the NeuroFuzzy Module can be optimized
manually and verified. User-defined training strategies can be
integrated as DLLs using the NeuroFuzzy Module's open interface.</font><font
size="2"> </font></p>

<h2><a name="fc"><font size="3" face="arial">Fuzzy Clustering</font></a><font
size="4"> </font></h2>

<p><font size="2" face="arial">NeuroFuzzy techniques provide
powerful methods for converting information contained in sample
data into fuzzy logic rules. The benefit of this is significant.
In contrast to sample data files, fuzzy logic rules can be
interpreted and optimized by humans in a straightforward manner.
However, in many cases the training data for the NeuroFuzzy
learning must be preprocessed. Such preprocessing is necessary
for two reasons:</font></p>

<ul>
    <li><font size="2" face="arial">It removes redundant data.</font><font
        size="2"> </font></li>
    <li><font size="2" face="arial">It resolves conflicts in the
        data. </font></li>
</ul>

<p><img src="fc_princ.gif" width="605" height="548"><font
size="2"> <br>
</font><font size="2" face="arial"><i>When Designing Fuzzy Logic
Systems Using Sample Data, FuzzyClustering Is an Important
Preprocessing Step</i></font><font size="2"> </font></p>

<h3><font size="3" face="arial">Applications in Business and
Finance </font></h3>

<p><font size="2" face="arial">Consider, for instance, that you
would like to derive a credit granting policy from past data. In
this past data, typically 98% of the cases cover standard cases,
while only 2% of the cases cover more unusual cases. As any
training algorithm treats each case with the same importance, it
will spend most of its attention on the standard cases and very
little on the unusual cases. If you use such sample data directly
for training, it takes long time for convergence and the
performance on the more unusual cases is likely to be low. Hence,
removal of redundant data greatly improves the training result in
this case.</font></p>

<p><font size="2" face="arial">Also, you may have a certain
degree of inconsistency in the cases because multiple credit
experts have processed the cases. These inconsistencies may be
very hard to spot, since credit experts may well agree in certain
situations but may strongly disagree in others. If you use
inconsistent training data, the NeuroFuzzy module averages
between the inconsistencies to minimize total training error. For
small inconsistencies this may be the right way to go, but if you
have a few strong inconsistencies in the training data set, the
training result may be poor. It is like the saying &quot;garbage
in, garbage out&quot;, and you better remove these strong
inconsistencies before training. </font></p>

<h3><font size="3" face="arial">Applications in Engineering </font></h3>

<p><font size="2" face="arial">Consider, for instance, that you
would like to derive a control strategy for a continuous process.
Because the process is in a stable operation point most of the
time, in your recorded training data typically 98% of the cases
cover this stable operating point, while only 2% of the cases
cover the critical and interesting situations. As any training
algorithm treats each case with the same importance, it spends
most of its attention on the standard cases and very little on
the unusual cases. If you use such sample data directly for
training, it takes long time for convergence and the performance
on the more unusual cases is likely to be low. Hence, removal of
redundant data greatly improves the training result in this case.</font></p>

<p><font size="2" face="arial">Also, you may have data points
that -- by expert evaluation -- describe the same operational
status. However, due to errors, for example limited sensor
precision, the values of the data points are different.
FuzzyClustering allows you to create a membership function
definition for each input and output signal. The membership
functions are only defined by two parameters, delta and epsilon.
Epsilon could be defined as sensor precision; within the epsilon
interval, two values are completely considered to be the same.
Delta defined the largest difference between two data points that
can still be considered &quot;somewhat&quot; similar. The
FuzzyCluster Module uses this information to reduce the sample
data set to only the relevant data sets, thus expediting system
design dramatically.</font></p>

<p><img src="fc_conf.gif" width="382" height="277"><font size="2">
<br>
</font><font size="2" face="arial"><i>FuzzyClustering Uses
Membership Function Definitions and Fuzzy <br>
Aggregation to Express the Similarity Between Two Data Points</i></font></p>

<p><font size="2" face="arial">To help with preprocessing of
sample data, <i>fuzzy</i>TECH integrates the FuzzyCluster Module.
The functions contained in this module help you both in removing
redundant data and resolving strong inconsistencies in the data. </font></p>

<p><img src="fc_bef.gif" width="538" height="442"><br>
<font size="2" face="arial"><i>Data Set With an Inconsistency
Before FuzzyClustering</i></font><font size="2"> </font></p>

<p><font size="2" face="arial">Note, the FuzzyCluster Module is
contained with the NeuroFuzzy Module. Neither can be purchased
separately.</font></p>

<p><img src="fc_aft.gif" width="538" height="443"><br>
<font size="2" face="arial"><i>Data Set With an Inconsistency
After FuzzyClustering</i></font><font size="2"> </font></p>

<table border="1" cellspacing="1" width="100%" bgcolor="#ffff00">
    <tr>
        <td bgcolor="#000080"><font color="#00ffff" size="5"
        face="arial"><b><i>fuzzy</i></b><b>TECH: 6.
        NeuroFuzzy&trade; &amp; FuzzyCluster&trade; Modules</b></font>
        </td>
        <td align="center" bgcolor="#ffff00"><a href="index.htm"><img
        src="home.gif" alt="go back to home page" width="21"
        height="21"></a><a href="e_order.htm"><img
        src="previous.gif" alt="go to previous page in sequence"
        width="21" height="21"></a><a href="e_apnote.htm"><img
        src="next.gif" alt="go to next page in sequence"
        width="21" height="21"></a> </td>
    </tr>
</table>
</body>
</html>
